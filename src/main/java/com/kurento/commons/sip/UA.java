package com.kurento.commons.sip;

import java.text.ParseException;

import com.kurento.commons.sip.exception.ServerInternalErrorException;

/**
 * SIP User Agent is the software element thats manages SIP protocol internals.
 * Its funtions are
 * <ul>
 * <li>Encode and decode SIP messages. It must be able to handle header values
 * 
 * @author fjlopez
 * @version 1.0.0
 */
public interface UA {

	// public UserAgentHeader getUserAgentHeader();
	
	/**
	 * Returns IP address where SIP stack listens
	 * @return
	 */
	public String getLocalAddress();

	/**
	 * Returns port number where local SIP stack is binded
	 * @return
	 */
	public int getLocalPort();

	/**
	 * Returns SIP proxy IP address where SIP messages are sent
	 * @return
	 */
	public String getProxyAddress();

	/**
	 * Returns proxy port number where SIP messages are sent
	 * @return
	 */
	public int getProxyPort();

	/**
	 * Terminate the UA. This process will perform the procedure below
	 * <ul>
	 * <li>Terminate all SipCall managed by this UA
	 * <li>Un-Register SIPURI from all SipEndPoint
	 * <li>Terminate the SIP stack and free the network socket
	 * </ul>
	 */
	public void terminate();

	/**
	 * Creates a new SipEndPoint for the given SIPURI (user@realm) and registers
	 * a contact for that SIPURI in the configured Registrar. On registrartion
	 * it is mandatory to provide a reference to the listener object that will
	 * receive all events generated by the SipEndPoint
	 * 
	 * @param user
	 *            User name of the SIPURI
	 * @param realm
	 *            Domain name of the SIPURI
	 * @param password
	 *            User password if authentication is enabled on the REGISTRAR
	 * @param expires
	 *            Contact expire time
	 * @param handler
	 *            Listener object receiving events from the created SipEndPoint
	 * @return
	 * @throws ParseException
	 *             if forbidden characters are provided for the user or realm
	 *             parameters
	 * @throws ServerInternalErrorException
	 *             if an internal error is found that prevents the registration
	 *             process to complete
	 */
	public SipEndPoint registerEndPoint(String user, String realm,
			String password, int expires, SipEndPointListener handler)
			throws ParseException, ServerInternalErrorException;

}