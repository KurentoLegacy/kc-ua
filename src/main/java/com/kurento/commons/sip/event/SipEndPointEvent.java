package com.kurento.commons.sip.event;

import java.util.EventObject;

import com.kurento.commons.sip.SipCall;
import com.kurento.commons.sip.SipEndPoint;

/**
 * SipEndPointsEvents are generated by a SipEndPoint when a state transition
 * takes place within the service element
 * 
 * @author Kurento
 * 
 */
public class SipEndPointEvent extends EventObject {

	private static final long serialVersionUID = 6307930313482035976L;

	/**
	 * This event signals the UA received a call INVITE for the SipEndPoint
	 * SIPURI
	 */
	public static final SipEventType INCOMING_CALL = EventTypeEnum.INCOMING_CALL;

	/**
	 * This event signals the UA successfully registered the SIPURI
	 */
	public static final SipEventType REGISTER_USER_SUCESSFUL = EventTypeEnum.REGISTER_USER_SUCESSFUL;

	/**
	 * This event signals the REGISTER rejected to register the SIPURI with a
	 * 403 code
	 */
	public static final SipEventType REGISTER_USER_NOT_FOUND = EventTypeEnum.REGISTER_USER_NOT_FOUND;

	/**
	 * This event signals a register failure with 4xx response
	 */
	public static final SipEventType REGISTER_USER_FAIL = EventTypeEnum.REGISTER_USER_FAIL;

	/**
	 * This event signals an internal UA error preventing the REGISTER operation
	 * to complete sucessfully
	 */
	public static final SipEventType SERVER_INTERNAL_ERROR = EventTypeEnum.SERVER_INTERNAL_ERROR;

	private SipEventType eventType;

	/**
	 * This constructor allows to create an event whose source is a call managed
	 * by the EndPoint
	 * 
	 * @param eventType
	 * @param source
	 *            SipCall generating this event
	 */
	public SipEndPointEvent(SipEventType eventType, SipCall source) {
		super(source);
		this.eventType = eventType;
	}

	/**
	 * This constructor allows to create an event whose source is the EndPoint
	 * itself
	 * 
	 * @param eventType
	 * @param source
	 */
	public SipEndPointEvent(SipEventType eventType, SipEndPoint source) {
		super(source);
		this.eventType = eventType;
	}

	/**
	 * Get SipEndPoint source. This function can be called with events:
	 * <ul>
	 * <li>INCOMING_CALL
	 * </ul>
	 * When source is not a SipCall this method returns null
	 * 
	 * @return SIP call generating the event
	 */

	public SipCall getCallSource() {
		if (source instanceof SipCall)
			return (SipCall) source;
		else
			return null;
	}

	/**
	 * Get SipCall source. This function can be called with events:
	 * <ul>
	 * <li>REGISTER_USER_SUCESSFUL
	 * <li>REGISTER_USER_NOT_FOUND
	 * <li>REGISTER_USER_FAIL
	 * <li>SERVER_INTERNAL_ERROR
	 * </ul>
	 * When source is not a SipEndPoint this method returns null
	 * 
	 * @return SIP EndPoint generating the event
	 */
	public SipEndPoint getEndPointSource() {
		return (SipEndPoint) source;
	}

	/**
	 * Returns the event type
	 * 
	 * @return
	 */
	public SipEventType getEventType() {
		return eventType;
	}

	public String toString() {
		return eventType.toString();
	}
}
