package com.kurento.commons.ua.event;

import java.util.EventObject;

import com.kurento.commons.ua.Call;
import com.kurento.commons.ua.EndPoint;

/**
 * EndPointsEvents are generated by a EndPoint when a state transition
 * takes place within the service element
 * 
 * @author Kurento
 * 
 */
public class EndPointEvent extends EventObject {

	private static final long serialVersionUID = 6307930313482035976L;

	/**
	 * This event signals the UA received a call INVITE for the EndPoint
	 * URI
	 */
	public static final EventType INCOMING_CALL = EventTypeEnum.INCOMING_CALL;

	/**
	 * This event signals the UA successfully registered the URI
	 */
	public static final EventType REGISTER_USER_SUCESSFUL = EventTypeEnum.REGISTER_USER_SUCESSFUL;

	/**
	 * This event signals the REGISTER rejected to register the URI with a
	 * 403 code
	 */
	public static final EventType REGISTER_USER_NOT_FOUND = EventTypeEnum.REGISTER_USER_NOT_FOUND;

	/**
	 * This event signals a register failure with 4xx response
	 */
	public static final EventType REGISTER_USER_FAIL = EventTypeEnum.REGISTER_USER_FAIL;

	/**
	 * This event signals an internal UA error preventing the REGISTER operation
	 * to complete sucessfully
	 */
	public static final EventType SERVER_INTERNAL_ERROR = EventTypeEnum.SERVER_INTERNAL_ERROR;

	private EventType eventType;

	/**
	 * This constructor allows to create an event whose source is a call managed
	 * by the EndPoint
	 * 
	 * @param eventType
	 * @param source
	 *            Call generating this event
	 */
	public EndPointEvent(EventType eventType, Call source) {
		super(source);
		this.eventType = eventType;
	}

	/**
	 * This constructor allows to create an event whose source is the EndPoint
	 * itself
	 * 
	 * @param eventType
	 * @param source
	 */
	public EndPointEvent(EventType eventType, EndPoint source) {
		super(source);
		this.eventType = eventType;
	}

	/**
	 * Get EndPoint source. This function can be called with events:
	 * <ul>
	 * <li>INCOMING_CALL
	 * </ul>
	 * When source is not a Call this method returns null
	 * 
	 * @return Call generating the event
	 */

	public Call getCallSource() {
		if (source instanceof Call)
			return (Call) source;
		else
			return null;
	}

	/**
	 * Get Call source. This function can be called with events:
	 * <ul>
	 * <li>REGISTER_USER_SUCESSFUL
	 * <li>REGISTER_USER_NOT_FOUND
	 * <li>REGISTER_USER_FAIL
	 * <li>SERVER_INTERNAL_ERROR
	 * </ul>
	 * When source is not a EndPoint this method returns null
	 * 
	 * @return EndPoint generating the event
	 */
	public EndPoint getEndPointSource() {
		return (EndPoint) source;
	}

	/**
	 * Returns the event type
	 * 
	 * @return Event type
	 */
	public EventType getEventType() {
		return eventType;
	}

	public String toString() {
		return eventType.toString();
	}
}
