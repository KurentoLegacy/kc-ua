package com.kurento.commons.ua;

import com.kurento.commons.ua.exception.ServerInternalErrorException;

/**
 * This class represents the service EndPoint. It is associated to a SIP URI, so
 * any SIP call addressed to that SIP URI will be multiplexed by the UA. The
 * same way, outgoing calls will be generated by the EndPoint SIP URI
 * <p>
 * The EndPoint together with the {@link EndPointListener} provides a
 * control interface based in the telephone model of use, where the management
 * concepts are: dial, ringing, hang-up, etc...
 * 
 * @author Kurento
 * 
 */
public interface EndPoint {

	/**
	 * Terminates the EndPoint. This method causes the UA to un-register the
	 * SIP URI and not to accept any incoming or outgoing call addressed to it
	 * 
	 * @throws ServerInternalErrorException
	 */
	public void terminate() throws ServerInternalErrorException;

	/**
	 * Creates a new outgoing call and initiates the SIP negotiation with the
	 * called party specified. In order to start the procedure it must be
	 * provided a CallListener that will receive call events
	 * <p>
	 * Method returns control immediately after it is called. Negotiation and
	 * setup is carried out asynchronously and progress is notified through
	 * events to the controller
	 * 
	 * @param remoteParty
	 *            Called party
	 * @param callController
	 *            Listener of Call events
	 * @return the SIP call object
	 * @throws ServerInternalErrorException
	 *             If an error occurts preventing the local UA to initiate the
	 *             SIP procedure
	 */
	public Call dial(String remoteParty, CallListener callController)
			throws ServerInternalErrorException;

	/**
	 * Sends an OPTIONS message to a remote peer in order to find out if that
	 * user is still available and to get its media capabilitites.
	 * <p>
	 * <b>This function is not avalable yet</b>
	 * 
	 * @param remoteParty 
	 * @param callController
	 * @throws ServerInternalErrorException
	 */
	public void options(String remoteParty, CallListener callController)
			throws ServerInternalErrorException;

}
